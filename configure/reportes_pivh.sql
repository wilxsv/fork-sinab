--REGISTRO EN OPCIONES DEL MENU
USE segabasii;
	INSERT [dbo].[SEGOPCIONESSISTEMA] ([IDOPCIONSISTEMA], [DESCRIPCION], [URL], [ESTAHABILITADO], [IDPADRE], [ORDEN], [AUUSUARIOCREACION], [AUFECHACREACION], [AUUSUARIOMODIFICACION], [AUFECHAMODIFICACION], [ESTASINCRONIZADA]) VALUES (333, N'Reportes Programa VIH', N'', 1, NULL, 0, NULL, NULL, NULL, NULL, 0);
	INSERT [dbo].[SEGOPCIONESSISTEMA] ([IDOPCIONSISTEMA], [DESCRIPCION], [URL], [ESTAHABILITADO], [IDPADRE], [ORDEN], [AUUSUARIOCREACION], [AUFECHACREACION], [AUUSUARIOMODIFICACION], [AUFECHAMODIFICACION], [ESTASINCRONIZADA]) VALUES (336, N'Informe de Ingresos por Grupo de Productos VIH', N'~/Reportes/pvih/ingreso_grupo.aspx', 1, 333, 0, NULL, NULL, NULL, NULL, 0);
	INSERT [dbo].[SEGOPCIONESSISTEMA] ([IDOPCIONSISTEMA], [DESCRIPCION], [URL], [ESTAHABILITADO], [IDPADRE], [ORDEN], [AUUSUARIOCREACION], [AUFECHACREACION], [AUUSUARIOMODIFICACION], [AUFECHAMODIFICACION], [ESTASINCRONIZADA]) VALUES (337, N'Informe de Despachos por Grupo de Productos VIH', N'~/Reportes/pvih/despacho_grupo.aspx', 1, 333, 0, NULL, NULL, NULL, NULL, 0);
	INSERT [dbo].[SEGOPCIONESSISTEMA] ([IDOPCIONSISTEMA], [DESCRIPCION], [URL], [ESTAHABILITADO], [IDPADRE], [ORDEN], [AUUSUARIOCREACION], [AUFECHACREACION], [AUUSUARIOMODIFICACION], [AUFECHAMODIFICACION], [ESTASINCRONIZADA]) VALUES (338, N'Inventario por grupo de productos VIH', N'~/Reportes/pvih/inventario.aspx', 1, 333, 0, NULL, NULL, NULL, NULL, 0);
	INSERT [dbo].[SEGOPCIONESSISTEMA] ([IDOPCIONSISTEMA], [DESCRIPCION], [URL], [ESTAHABILITADO], [IDPADRE], [ORDEN], [AUUSUARIOCREACION], [AUFECHACREACION], [AUUSUARIOMODIFICACION], [AUFECHAMODIFICACION], [ESTASINCRONIZADA]) VALUES (339, N'Inventario y desabastecimiento', N'~/Reportes/pvih/inventario_desabastecimiento.aspx', 1, 333, 0, NULL, NULL, NULL, NULL, 0);
	--insertar los roles y permisos de acuerdo a los valores insertados
GO

--REGISTRO DE RECURSOS PARA REPORTES DE VIH
--REGISTRAR FUNCIONES COMUNES
USE abastecimiento;

ALTER TABLE SAB_CAT_PROGRAMAS ADD PARENT_PROGRAMA SMALLINT NOT NULL DEFAULT(0) ;  
INSERT INTO [dbo].[SAB_CAT_PROGRAMAS] ([IDPROGRAMA],[CODIGO],[NOMBRE],[ESTASINCRONIZADA],[PARENT_PROGRAMA]) VALUES (6, '06', 'Antirretrovirales',0,2),(7, '07', 'Pruebas de VIH',0,2),(8, '08', 'Insumos para pruebas de VIH',0,2),(9, '09', 'Infecciones Oportunistas',0,2),(10, '10', 'ITS',0,2),(11, '11', 'Otros VIH',0,2);

/**************************************************** Insertar los productos de cada categoria ************************************/
GO

CREATE FUNCTION [dbo].[fn_GetIdProductoPorPrograma](@idPrograma int)
RETURNS TABLE  
AS  
RETURN   
(
	SELECT A.PARENT_PROGRAMA, A.IDPROGRAMA, A.NOMBRE, B.IDPRODUCTO
	FROM SAB_CAT_PROGRAMAS AS A
		 INNER JOIN SAB_CAT_PRODUCTOSPROGRAMAS AS B
		 ON A.IDPROGRAMA = B.IDPROGRAMA
	WHERE (A.IDPROGRAMA = @idPrograma) OR (A.PARENT_PROGRAMA = @idPrograma)
);
GO

CREATE FUNCTION [dbo].[fn_getIngresosPorPrograma](@idPrograma smallint, @fechaDesde varchar(12), @fechaHasta varchar(12))
RETURNS TABLE  
AS  
RETURN   
(
	SELECT	A.NOMBRE NOMBREALMACEN, convert(varchar, M.FECHAMOVIMIENTO, 103) FECHAMOVIMIENTO, 
			isnull(convert(varchar, M.IDDOCUMENTO) + '/' + convert(varchar, M.ANIO), '') NUMERODOCUMENTO, 
			CP.CORRPRODUCTO, CP.DESCLARGO, CP.DESCRIPCION UNIDADMEDIDA, isnull(L.CODIGO, '(N/A)') LOTE,
			L.FECHAVENCIMIENTO, isnull(convert(varchar, datepart(month, L.FECHAVENCIMIENTO)) + '/' + convert(varchar, datepart(year, L.FECHAVENCIMIENTO)), '') FECHAVENCIMIENTOMMAAAA,
			DM.CANTIDAD CANTIDADINGRESO, L.PRECIOLOTE PRECIOUNITARIO, (DM.CANTIDAD * L.PRECIOLOTE) MONTOINGRESO,
			FF.NOMBRE FUENTEFINANCIAMIENTO, RD.NOMBRECORTO RESPONSABLEDISTRIBUCION, EM.DESCRIPCION ESTADO, TT.DESCRIPCION TIPOTRANSACCION, 
			isnull(M.EMPLEADOALMACEN, '') EMPLEADOALMACEN, '' CARGO, ALM.NOMBRE,RR.NUMEROVALE
	FROM	SAB_ALM_DETALLEMOVIMIENTOS DM INNER JOIN SAB_ALM_LOTES L ON (DM.IDALMACEN = L.IDALMACEN AND DM.IDLOTE = L.IDLOTE) 
			INNER JOIN SAB_ALM_MOVIMIENTOS M ON (DM.IDESTABLECIMIENTO = M.IDESTABLECIMIENTO AND DM.IDTIPOTRANSACCION = M.IDTIPOTRANSACCION AND DM.IDMOVIMIENTO = M.IDMOVIMIENTO) 
			INNER JOIN vv_CATALOGOPRODUCTOS CP ON DM.IDPRODUCTO = CP.IDPRODUCTO 
			INNER JOIN SAB_CAT_FUENTEFINANCIAMIENTOS FF ON L.IDFUENTEFINANCIAMIENTO = FF.IDFUENTEFINANCIAMIENTO 
			INNER JOIN SAB_CAT_RESPONSABLEDISTRIBUCION RD ON L.IDRESPONSABLEDISTRIBUCION = RD.IDRESPONSABLEDISTRIBUCION 
			INNER JOIN SAB_CAT_ALMACENES A ON DM.IDALMACEN = A.IDALMACEN 
			INNER JOIN SAB_CAT_ESTADOSMOVIMIENTOS EM ON M.IDESTADO = EM.IDESTADO 
			INNER JOIN SAB_CAT_TIPOTRANSACCIONES TT ON M.IDTIPOTRANSACCION = TT.IDTIPOTRANSACCION 
			INNER JOIN SAB_ALM_RECIBOSRECEPCION RR ON (RR.IDALMACEN = M.IDALMACEN) AND  (RR.ANIO = M.ANIO) AND  (RR.IDRECIBO = M.IDDOCUMENTO) 
			LEFT OUTER JOIN SAB_CAT_ALMACENES ALM ON (ALM.IDALMACEN = RR.IDALMACENVALE)
			LEFT OUTER JOIN SAB_CAT_ESTABLECIMIENTOS EST ON (EST.IDESTABLECIMIENTO = RR.IDESTABLECIMIENTODEVOLUCION) 
			LEFT OUTER JOIN SAB_CAT_PROVEEDORES PROV ON (PROV.IDPROVEEDOR = RR.IDPROVEEDOR) 
	WHERE	(CP.IDSUMINISTRO = 1)
			AND cp.IDPRODUCTO IN ( SELECT IDPRODUCTO FROM fn_GetIdProductoPorPrograma(@idPrograma) )
			AND DM.IDTIPOTRANSACCION in (8, 16, 17) AND M.IDESTADO in (1, 2)
		    AND ((M.FECHAMOVIMIENTO between @fechaDesde AND @fechaHasta)
			OR (@fechaDesde IS NULL OR @fechaHasta IS NULL)) 
);
GO

CREATE FUNCTION [dbo].[fn_getEgresosPorPrograma](@idPrograma smallint, @fechaDesde varchar(12), @fechaHasta varchar(12))
RETURNS TABLE  
AS  
RETURN   
( 
	SELECT	A.NOMBRE NOMBREALMACEN,
			convert(varchar, M.FECHAMOVIMIENTO, 103) as  FECHAMOVIMIENTO, 
			isnull(convert(varchar, M.IDDOCUMENTO) + '/' + convert(varchar, M.ANIO), '') NUMERODOCUMENTO,
			CP.CORRPRODUCTO,
			CP.DESCLARGO, 
			CP.DESCRIPCION UNIDADMEDIDA, 
			CASE WHEN E.NOMBRE IS NULL THEN LEH.NOMBRE_LUGAR_ENTREGA_HOSPITAL ELSE E.NOMBRE END ESTABLECIMIENTODESTINO,
			DM.CANTIDAD CANTIDADEGRESO, 
			L.PRECIOLOTE PRECIOUNITARIO, 
			(DM.CANTIDAD * L.PRECIOLOTE) MONTOEGRESO, 
			isnull(L.CODIGO, '(N/A)') LOTE, 
			L.FECHAVENCIMIENTO, 
			isnull(convert(varchar, datepart(month, L.FECHAVENCIMIENTO)) + '/' + convert(varchar, datepart(year, L.FECHAVENCIMIENTO)), '') FECHAVENCIMIENTOMMAAAA,
			FF.NOMBRE FUENTEFINANCIAMIENTO,
			RD.NOMBRECORTO RESPONSABLEDISTRIBUCION,
			EM.DESCRIPCION ESTADO, 
			TT.DESCRIPCION TIPOTRANSACCION
	FROM	SAB_ALM_DETALLEMOVIMIENTOS DM 
			INNER JOIN SAB_ALM_LOTES L ON (DM.IDALMACEN = L.IDALMACEN AND DM.IDLOTE = L.IDLOTE) 
			INNER JOIN SAB_ALM_MOVIMIENTOS M ON (DM.IDESTABLECIMIENTO = M.IDESTABLECIMIENTO AND DM.IDTIPOTRANSACCION = M.IDTIPOTRANSACCION AND DM.IDMOVIMIENTO = M.IDMOVIMIENTO) 
			INNER JOIN vv_CATALOGOPRODUCTOS CP ON DM.IDPRODUCTO = CP.IDPRODUCTO 
			LEFT OUTER JOIN SAB_CAT_ESTABLECIMIENTOS E ON M.IDESTABLECIMIENTODESTINO = E.IDESTABLECIMIENTO 
			LEFT OUTER JOIN SAB_CAT_LUGARES_ENTREGA_HOSPITALES LEH ON M.ID_LUGAR_ENTREGA_HOSPITAL = LEH.ID_LUGAR_ENTREGA_HOSPITAL AND M.IDALMACEN = LEH.IDALMACEN 
			INNER JOIN SAB_CAT_FUENTEFINANCIAMIENTOS FF ON L.IDFUENTEFINANCIAMIENTO = FF.IDFUENTEFINANCIAMIENTO 
			INNER JOIN SAB_CAT_RESPONSABLEDISTRIBUCION RD ON L.IDRESPONSABLEDISTRIBUCION = RD.IDRESPONSABLEDISTRIBUCION 
			INNER JOIN SAB_CAT_ALMACENES A ON DM.IDALMACEN = A.IDALMACEN INNER JOIN SAB_CAT_ESTADOSMOVIMIENTOS EM ON M.IDESTADO = EM.IDESTADO 
			INNER JOIN SAB_CAT_TIPOTRANSACCIONES TT ON M.IDTIPOTRANSACCION = TT.IDTIPOTRANSACCION
    WHERE	CP.IDPRODUCTO IN ( SELECT IDPRODUCTO FROM fn_GetIdProductoPorPrograma(@idPrograma) )
			AND DM.IDTIPOTRANSACCION = 2 AND M.IDESTADO in (1, 2) 
			AND ((M.FECHAMOVIMIENTO between @fechaDesde AND @fechaHasta) OR (@fechaDesde IS NULL OR @fechaHasta IS NULL))
);
GO

ALTER FUNCTION [dbo].[fn_getInventarioPorPrograma](@idPrograma smallint, @fechaHasta varchar(12))
RETURNS TABLE  
AS  
RETURN   
(
	with t as (
		SELECT L.IDALMACEN, L.IDLOTE, 
				sum(CASE WHEN L.FECHAVENCIMIENTO IS NOT NULL AND L.FECHAVENCIMIENTO < @fechaHasta THEN 0 WHEN TT.IDTIPOTRANSACCION <> 6 AND DM.CANTIDADNODISPONIBLE = 1 THEN 0 ELSE DM.CANTIDAD * TT.AFECTAINVENTARIO END) CANTIDADDISPONIBLE,
				sum(CASE WHEN L.FECHAVENCIMIENTO IS NOT NULL AND L.FECHAVENCIMIENTO < @fechaHasta THEN 0 WHEN TT.IDTIPOTRANSACCION <> 6 AND DM.CANTIDADNODISPONIBLE = 1 THEN 0 ELSE DM.CANTIDAD * TT.AFECTAINVENTARIO * L.PRECIOLOTE END) MONTODISPONIBLE, 
				sum(CASE WHEN TT.IDTIPOTRANSACCION = 6 OR DM.CANTIDADNODISPONIBLE = 1 THEN 0 WHEN L.FECHAVENCIMIENTO IS NOT NULL AND L.FECHAVENCIMIENTO < @fechaHasta THEN DM.CANTIDAD * TT.AFECTAINVENTARIO ELSE 0 END) CANTIDADVENCIDA,
			    sum(CASE WHEN TT.IDTIPOTRANSACCION = 6 OR DM.CANTIDADNODISPONIBLE = 1 THEN 0 WHEN L.FECHAVENCIMIENTO IS NOT NULL AND L.FECHAVENCIMIENTO < @fechaHasta THEN DM.CANTIDAD * TT.AFECTAINVENTARIO * L.PRECIOLOTE ELSE 0 END) MONTOVENCIDA,
				sum(CASE WHEN TT.IDTIPOTRANSACCION = 6 THEN DM.CANTIDAD WHEN DM.CANTIDADNODISPONIBLE = 1 THEN DM.CANTIDAD * TT.AFECTAINVENTARIO ELSE 0 END) CANTIDADNODISPONIBLE, 
				sum(CASE WHEN TT.IDTIPOTRANSACCION = 6 THEN DM.CANTIDAD * L.PRECIOLOTE WHEN DM.CANTIDADNODISPONIBLE = 1 THEN DM.CANTIDAD * TT.AFECTAINVENTARIO * L.PRECIOLOTE ELSE 0 END) MONTONODISPONIBLE
        FROM	SAB_ALM_MOVIMIENTOS M 
				INNER JOIN SAB_CAT_TIPOTRANSACCIONES TT 
				ON M.IDTIPOTRANSACCION = TT.IDTIPOTRANSACCION 
				INNER JOIN SAB_ALM_DETALLEMOVIMIENTOS DM 
				ON (M.IDESTABLECIMIENTO = DM.IDESTABLECIMIENTO 
				AND M.IDTIPOTRANSACCION = DM.IDTIPOTRANSACCION 
				AND M.IDMOVIMIENTO = DM.IDMOVIMIENTO) 
				INNER JOIN SAB_ALM_LOTES L 
				ON (DM.IDALMACEN = L.IDALMACEN 
				AND DM.IDLOTE = L.IDLOTE)
				INNER JOIN vv_CATALOGOPRODUCTOS CP 
				ON L.IDPRODUCTO = CP.IDPRODUCTO 
				INNER JOIN SAB_CAT_FUENTEFINANCIAMIENTOS FF 
				ON L.IDFUENTEFINANCIAMIENTO = FF.IDFUENTEFINANCIAMIENTO 
		WHERE	(CP.IDSUMINISTRO = 1)
				AND M.IDESTADO = 2
				AND L.IDFUENTEFINANCIAMIENTO IN (6, 30)
				OR L.IDFUENTEFINANCIAMIENTO NOT IN (6, 30)
				AND (TT.AFECTAINVENTARIO <> 0 OR TT.IDTIPOTRANSACCION = 6) 
				AND M.FECHAMOVIMIENTO < @fechaHasta 
        GROUP BY	L.IDALMACEN, L.IDLOTE 
	) 
	SELECT	A.NOMBRE NOMBREALMACEN, 
			CP.CORRPRODUCTO, 
			CP.DESCLARGO, 
			CP.DESCRIPCION UNIDADMEDIDA, 
			FF.NOMBRE NOMBREFUENTE,RD.NOMBRE NOMBRERESPONSABLE, 
			isnull(L.CODIGO + isnull(L.DETALLE, ''), '(N/A)') CODIGO, 
			isnull(convert(varchar, datepart(month, L.FECHAVENCIMIENTO)) + '/' + convert(varchar, datepart(year, L.FECHAVENCIMIENTO)), '') FECHAVENCIMIENTOMMAAAA, 
			L.PRECIOLOTE, 
			t.CANTIDADDISPONIBLE, 
			t.MONTODISPONIBLE, 
			T.CANTIDADNODISPONIBLE, 
			T.MONTONODISPONIBLE,  
			T.CANTIDADVENCIDA,  
			T.MONTOVENCIDA
    FROM t	INNER JOIN SAB_ALM_LOTES L 
			ON t.IDALMACEN = L.IDALMACEN 
			AND t.IDLOTE = L.IDLOTE 
			INNER JOIN SAB_CAT_RESPONSABLEDISTRIBUCION RD 
			ON L.IDRESPONSABLEDISTRIBUCION = RD.IDRESPONSABLEDISTRIBUCION 
			INNER JOIN SAB_CAT_FUENTEFINANCIAMIENTOS FF 
			ON L.IDFUENTEFINANCIAMIENTO = FF.IDFUENTEFINANCIAMIENTO 
			INNER JOIN vv_CATALOGOPRODUCTOS CP 
			ON L.IDPRODUCTO = CP.IDPRODUCTO 
			INNER JOIN SAB_CAT_ALMACENES A 
			ON L.IDALMACEN = A.IDALMACEN 
			LEFT OUTER JOIN SAB_ALM_UBICACIONESPRODUCTOS UP 
			ON L.IDALMACEN = UP.IDALMACEN 
			AND L.IDLOTE = UP.IDLOTE 
    WHERE	(t.CANTIDADDISPONIBLE<>0  OR t.CANTIDADNODISPONIBLE <> 0 OR t.CANTIDADVENCIDA <> 0 ) AND L.ESTADISPONIBLE = 1 
			AND CP.IDPRODUCTO IN ( SELECT IDPRODUCTO FROM fn_GetIdProductoPorPrograma(@idPrograma) )
);
GO
/*
select * from fn_getInventarioPorPrograma(2,'20131031')
select * from fn_GetIdProductoPorPrograma(5) order by idprograma
select * from fn_getIngresosPorPrograma(2, '20131031', '20161031')
*/