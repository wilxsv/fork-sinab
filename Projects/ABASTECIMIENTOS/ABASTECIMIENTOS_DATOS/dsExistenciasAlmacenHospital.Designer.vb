'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3615
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsExistenciasAlmacenes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsExistenciasAlmacenes
    Inherits Global.System.Data.DataSet
    
    Private tableExistenciasAlmacenes As ExistenciasAlmacenesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ExistenciasAlmacenes")) Is Nothing) Then
                MyBase.Tables.Add(New ExistenciasAlmacenesDataTable(ds.Tables("ExistenciasAlmacenes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExistenciasAlmacenes() As ExistenciasAlmacenesDataTable
        Get
            Return Me.tableExistenciasAlmacenes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsExistenciasAlmacenes = CType(MyBase.Clone,dsExistenciasAlmacenes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ExistenciasAlmacenes")) Is Nothing) Then
                MyBase.Tables.Add(New ExistenciasAlmacenesDataTable(ds.Tables("ExistenciasAlmacenes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableExistenciasAlmacenes = CType(MyBase.Tables("ExistenciasAlmacenes"),ExistenciasAlmacenesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExistenciasAlmacenes) Is Nothing) Then
                Me.tableExistenciasAlmacenes.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsExistenciasAlmacenes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsExistenciasAlmacenes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableExistenciasAlmacenes = New ExistenciasAlmacenesDataTable
        MyBase.Tables.Add(Me.tableExistenciasAlmacenes)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExistenciasAlmacenes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsExistenciasAlmacenes = New dsExistenciasAlmacenes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ExistenciasAlmacenesRowChangeEventHandler(ByVal sender As Object, ByVal e As ExistenciasAlmacenesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExistenciasAlmacenesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnCORRGRUPO As Global.System.Data.DataColumn
        
        Private columnCORRPRODUCTO As Global.System.Data.DataColumn
        
        Private columnCORRSUBGRUPO As Global.System.Data.DataColumn
        
        Private columnCORRSUMINISTRO As Global.System.Data.DataColumn
        
        Private columnDESCGRUPO As Global.System.Data.DataColumn
        
        Private columnDESCLARGO As Global.System.Data.DataColumn
        
        Private columnDESCSUBGRUPO As Global.System.Data.DataColumn
        
        Private columnDESCSUMINISTRO As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnESFARMACIA As Global.System.Data.DataColumn
        
        Private columnESTADISPONIBLE As Global.System.Data.DataColumn
        
        Private columnIDALMACEN As Global.System.Data.DataColumn
        
        Private columnIDALMACENORIGEN As Global.System.Data.DataColumn
        
        Private columnIDGRUPO As Global.System.Data.DataColumn
        
        Private columnIDPRODUCTO As Global.System.Data.DataColumn
        
        Private columnIDSUBGRUPO As Global.System.Data.DataColumn
        
        Private columnIDSUMINISTRO As Global.System.Data.DataColumn
        
        Private columnIDUNIDADMEDIDA As Global.System.Data.DataColumn
        
        Private columnLOTE As Global.System.Data.DataColumn
        
        Private columnMONTO As Global.System.Data.DataColumn
        
        Private columnNOMBREALMACEN As Global.System.Data.DataColumn
        
        Private columnNOMBREALMACENORIGEN As Global.System.Data.DataColumn
        
        Private columnNOMBRECORTORESPONSABLE As Global.System.Data.DataColumn
        
        Private columnNOMBREFUENTE As Global.System.Data.DataColumn
        
        Private columnNOMBRERESPONSABLE As Global.System.Data.DataColumn
        
        Private columnUNIDADMEDIDA As Global.System.Data.DataColumn
        
        Private columnSEC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ExistenciasAlmacenes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CORRGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORRGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CORRPRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORRPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CORRSUBGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORRSUBGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CORRSUMINISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORRSUMINISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCLARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCLARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCSUBGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCSUBGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCSUMINISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCSUMINISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESFARMACIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESFARMACIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADISPONIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADISPONIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDALMACENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDALMACEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDALMACENORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDALMACENORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDPRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDSUBGRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDSUBGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDSUMINISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDSUMINISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDUNIDADMEDIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUNIDADMEDIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREALMACENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREALMACEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREALMACENORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREALMACENORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBRECORTORESPONSABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRECORTORESPONSABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREFUENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREFUENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBRERESPONSABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRERESPONSABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADMEDIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDADMEDIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExistenciasAlmacenesRow
            Get
                Return CType(Me.Rows(index),ExistenciasAlmacenesRow)
            End Get
        End Property
        
        Public Event ExistenciasAlmacenesRowChanging As ExistenciasAlmacenesRowChangeEventHandler
        
        Public Event ExistenciasAlmacenesRowChanged As ExistenciasAlmacenesRowChangeEventHandler
        
        Public Event ExistenciasAlmacenesRowDeleting As ExistenciasAlmacenesRowChangeEventHandler
        
        Public Event ExistenciasAlmacenesRowDeleted As ExistenciasAlmacenesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExistenciasAlmacenesRow(ByVal row As ExistenciasAlmacenesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExistenciasAlmacenesRow( _
                    ByVal CODIGO As String,  _
                    ByVal CORRGRUPO As String,  _
                    ByVal CORRPRODUCTO As String,  _
                    ByVal CORRSUBGRUPO As String,  _
                    ByVal CORRSUMINISTRO As String,  _
                    ByVal DESCGRUPO As String,  _
                    ByVal DESCLARGO As String,  _
                    ByVal DESCSUBGRUPO As String,  _
                    ByVal DESCSUMINISTRO As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal ESFARMACIA As Short,  _
                    ByVal ESTADISPONIBLE As Short,  _
                    ByVal IDALMACEN As Integer,  _
                    ByVal IDALMACENORIGEN As Integer,  _
                    ByVal IDGRUPO As Integer,  _
                    ByVal IDPRODUCTO As Long,  _
                    ByVal IDSUBGRUPO As Integer,  _
                    ByVal IDSUMINISTRO As Integer,  _
                    ByVal IDUNIDADMEDIDA As Integer,  _
                    ByVal LOTE As String,  _
                    ByVal MONTO As Decimal,  _
                    ByVal NOMBREALMACEN As String,  _
                    ByVal NOMBREALMACENORIGEN As String,  _
                    ByVal NOMBRECORTORESPONSABLE As String,  _
                    ByVal NOMBREFUENTE As String,  _
                    ByVal NOMBRERESPONSABLE As String,  _
                    ByVal UNIDADMEDIDA As String,  _
                    ByVal SEC As Integer) As ExistenciasAlmacenesRow
            Dim rowExistenciasAlmacenesRow As ExistenciasAlmacenesRow = CType(Me.NewRow,ExistenciasAlmacenesRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO, CORRGRUPO, CORRPRODUCTO, CORRSUBGRUPO, CORRSUMINISTRO, DESCGRUPO, DESCLARGO, DESCSUBGRUPO, DESCSUMINISTRO, DIRECCION, ESFARMACIA, ESTADISPONIBLE, IDALMACEN, IDALMACENORIGEN, IDGRUPO, IDPRODUCTO, IDSUBGRUPO, IDSUMINISTRO, IDUNIDADMEDIDA, LOTE, MONTO, NOMBREALMACEN, NOMBREALMACENORIGEN, NOMBRECORTORESPONSABLE, NOMBREFUENTE, NOMBRERESPONSABLE, UNIDADMEDIDA, SEC}
            rowExistenciasAlmacenesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExistenciasAlmacenesRow)
            Return rowExistenciasAlmacenesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExistenciasAlmacenesDataTable = CType(MyBase.Clone,ExistenciasAlmacenesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExistenciasAlmacenesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnCORRGRUPO = MyBase.Columns("CORRGRUPO")
            Me.columnCORRPRODUCTO = MyBase.Columns("CORRPRODUCTO")
            Me.columnCORRSUBGRUPO = MyBase.Columns("CORRSUBGRUPO")
            Me.columnCORRSUMINISTRO = MyBase.Columns("CORRSUMINISTRO")
            Me.columnDESCGRUPO = MyBase.Columns("DESCGRUPO")
            Me.columnDESCLARGO = MyBase.Columns("DESCLARGO")
            Me.columnDESCSUBGRUPO = MyBase.Columns("DESCSUBGRUPO")
            Me.columnDESCSUMINISTRO = MyBase.Columns("DESCSUMINISTRO")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnESFARMACIA = MyBase.Columns("ESFARMACIA")
            Me.columnESTADISPONIBLE = MyBase.Columns("ESTADISPONIBLE")
            Me.columnIDALMACEN = MyBase.Columns("IDALMACEN")
            Me.columnIDALMACENORIGEN = MyBase.Columns("IDALMACENORIGEN")
            Me.columnIDGRUPO = MyBase.Columns("IDGRUPO")
            Me.columnIDPRODUCTO = MyBase.Columns("IDPRODUCTO")
            Me.columnIDSUBGRUPO = MyBase.Columns("IDSUBGRUPO")
            Me.columnIDSUMINISTRO = MyBase.Columns("IDSUMINISTRO")
            Me.columnIDUNIDADMEDIDA = MyBase.Columns("IDUNIDADMEDIDA")
            Me.columnLOTE = MyBase.Columns("LOTE")
            Me.columnMONTO = MyBase.Columns("MONTO")
            Me.columnNOMBREALMACEN = MyBase.Columns("NOMBREALMACEN")
            Me.columnNOMBREALMACENORIGEN = MyBase.Columns("NOMBREALMACENORIGEN")
            Me.columnNOMBRECORTORESPONSABLE = MyBase.Columns("NOMBRECORTORESPONSABLE")
            Me.columnNOMBREFUENTE = MyBase.Columns("NOMBREFUENTE")
            Me.columnNOMBRERESPONSABLE = MyBase.Columns("NOMBRERESPONSABLE")
            Me.columnUNIDADMEDIDA = MyBase.Columns("UNIDADMEDIDA")
            Me.columnSEC = MyBase.Columns("SEC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnCORRGRUPO = New Global.System.Data.DataColumn("CORRGRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORRGRUPO)
            Me.columnCORRPRODUCTO = New Global.System.Data.DataColumn("CORRPRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORRPRODUCTO)
            Me.columnCORRSUBGRUPO = New Global.System.Data.DataColumn("CORRSUBGRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORRSUBGRUPO)
            Me.columnCORRSUMINISTRO = New Global.System.Data.DataColumn("CORRSUMINISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORRSUMINISTRO)
            Me.columnDESCGRUPO = New Global.System.Data.DataColumn("DESCGRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCGRUPO)
            Me.columnDESCLARGO = New Global.System.Data.DataColumn("DESCLARGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCLARGO)
            Me.columnDESCSUBGRUPO = New Global.System.Data.DataColumn("DESCSUBGRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCSUBGRUPO)
            Me.columnDESCSUMINISTRO = New Global.System.Data.DataColumn("DESCSUMINISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCSUMINISTRO)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnESFARMACIA = New Global.System.Data.DataColumn("ESFARMACIA", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESFARMACIA)
            Me.columnESTADISPONIBLE = New Global.System.Data.DataColumn("ESTADISPONIBLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADISPONIBLE)
            Me.columnIDALMACEN = New Global.System.Data.DataColumn("IDALMACEN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDALMACEN)
            Me.columnIDALMACENORIGEN = New Global.System.Data.DataColumn("IDALMACENORIGEN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDALMACENORIGEN)
            Me.columnIDGRUPO = New Global.System.Data.DataColumn("IDGRUPO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDGRUPO)
            Me.columnIDPRODUCTO = New Global.System.Data.DataColumn("IDPRODUCTO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDPRODUCTO)
            Me.columnIDSUBGRUPO = New Global.System.Data.DataColumn("IDSUBGRUPO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDSUBGRUPO)
            Me.columnIDSUMINISTRO = New Global.System.Data.DataColumn("IDSUMINISTRO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDSUMINISTRO)
            Me.columnIDUNIDADMEDIDA = New Global.System.Data.DataColumn("IDUNIDADMEDIDA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUNIDADMEDIDA)
            Me.columnLOTE = New Global.System.Data.DataColumn("LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTE)
            Me.columnMONTO = New Global.System.Data.DataColumn("MONTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO)
            Me.columnNOMBREALMACEN = New Global.System.Data.DataColumn("NOMBREALMACEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREALMACEN)
            Me.columnNOMBREALMACENORIGEN = New Global.System.Data.DataColumn("NOMBREALMACENORIGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREALMACENORIGEN)
            Me.columnNOMBRECORTORESPONSABLE = New Global.System.Data.DataColumn("NOMBRECORTORESPONSABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRECORTORESPONSABLE)
            Me.columnNOMBREFUENTE = New Global.System.Data.DataColumn("NOMBREFUENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREFUENTE)
            Me.columnNOMBRERESPONSABLE = New Global.System.Data.DataColumn("NOMBRERESPONSABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRERESPONSABLE)
            Me.columnUNIDADMEDIDA = New Global.System.Data.DataColumn("UNIDADMEDIDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDADMEDIDA)
            Me.columnSEC = New Global.System.Data.DataColumn("SEC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExistenciasAlmacenesRow() As ExistenciasAlmacenesRow
            Return CType(Me.NewRow,ExistenciasAlmacenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExistenciasAlmacenesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExistenciasAlmacenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExistenciasAlmacenesRowChangedEvent) Is Nothing) Then
                RaiseEvent ExistenciasAlmacenesRowChanged(Me, New ExistenciasAlmacenesRowChangeEvent(CType(e.Row,ExistenciasAlmacenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExistenciasAlmacenesRowChangingEvent) Is Nothing) Then
                RaiseEvent ExistenciasAlmacenesRowChanging(Me, New ExistenciasAlmacenesRowChangeEvent(CType(e.Row,ExistenciasAlmacenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExistenciasAlmacenesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExistenciasAlmacenesRowDeleted(Me, New ExistenciasAlmacenesRowChangeEvent(CType(e.Row,ExistenciasAlmacenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExistenciasAlmacenesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExistenciasAlmacenesRowDeleting(Me, New ExistenciasAlmacenesRowChangeEvent(CType(e.Row,ExistenciasAlmacenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExistenciasAlmacenesRow(ByVal row As ExistenciasAlmacenesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsExistenciasAlmacenes = New dsExistenciasAlmacenes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExistenciasAlmacenesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExistenciasAlmacenesRow
        Inherits Global.System.Data.DataRow
        
        Private tableExistenciasAlmacenes As ExistenciasAlmacenesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExistenciasAlmacenes = CType(Me.Table,ExistenciasAlmacenesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.CODIGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CORRGRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.CORRGRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CORRGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.CORRGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CORRPRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.CORRPRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CORRPRODUCTO' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.CORRPRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CORRSUBGRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.CORRSUBGRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CORRSUBGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.CORRSUBGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CORRSUMINISTRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.CORRSUMINISTROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CORRSUMINISTRO' de la tabla 'ExistenciasAlmacenes' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.CORRSUMINISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCGRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.DESCGRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.DESCGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCLARGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.DESCLARGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCLARGO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.DESCLARGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCSUBGRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.DESCSUBGRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCSUBGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.DESCSUBGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCSUMINISTRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.DESCSUMINISTROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCSUMINISTRO' de la tabla 'ExistenciasAlmacenes' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.DESCSUMINISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIRECCION' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESFARMACIA() As Short
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.ESFARMACIAColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESFARMACIA' de la tabla 'ExistenciasAlmacenes' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.ESFARMACIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADISPONIBLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.ESTADISPONIBLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESTADISPONIBLE' de la tabla 'ExistenciasAlmacenes' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.ESTADISPONIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDALMACEN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDALMACENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDALMACEN' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDALMACENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDALMACENORIGEN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDALMACENORIGENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDALMACENORIGEN' de la tabla 'ExistenciasAlmacenes' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDALMACENORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDGRUPO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDGRUPOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDPRODUCTO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDPRODUCTOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDPRODUCTO' de la tabla 'ExistenciasAlmacenes' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDPRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDSUBGRUPO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDSUBGRUPOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDSUBGRUPO' de la tabla 'ExistenciasAlmacenes' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDSUBGRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDSUMINISTRO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDSUMINISTROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDSUMINISTRO' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDSUMINISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDUNIDADMEDIDA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.IDUNIDADMEDIDAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDUNIDADMEDIDA' de la tabla 'ExistenciasAlmacenes' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.IDUNIDADMEDIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.LOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOTE' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.MONTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONTO' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.MONTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBREALMACEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.NOMBREALMACENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBREALMACEN' de la tabla 'ExistenciasAlmacenes' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.NOMBREALMACENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBREALMACENORIGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.NOMBREALMACENORIGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBREALMACENORIGEN' de la tabla 'ExistenciasAlmacenes' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.NOMBREALMACENORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRECORTORESPONSABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.NOMBRECORTORESPONSABLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRECORTORESPONSABLE' de la tabla 'ExistenciasAlmacenes"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.NOMBRECORTORESPONSABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBREFUENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.NOMBREFUENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBREFUENTE' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.NOMBREFUENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRERESPONSABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.NOMBRERESPONSABLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRERESPONSABLE' de la tabla 'ExistenciasAlmacenes' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.NOMBRERESPONSABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDADMEDIDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.UNIDADMEDIDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDADMEDIDA' de la tabla 'ExistenciasAlmacenes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.UNIDADMEDIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExistenciasAlmacenes.SECColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SEC' de la tabla 'ExistenciasAlmacenes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExistenciasAlmacenes.SECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGONull()
            Me(Me.tableExistenciasAlmacenes.CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCORRGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.CORRGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCORRGRUPONull()
            Me(Me.tableExistenciasAlmacenes.CORRGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCORRPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.CORRPRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCORRPRODUCTONull()
            Me(Me.tableExistenciasAlmacenes.CORRPRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCORRSUBGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.CORRSUBGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCORRSUBGRUPONull()
            Me(Me.tableExistenciasAlmacenes.CORRSUBGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCORRSUMINISTRONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.CORRSUMINISTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCORRSUMINISTRONull()
            Me(Me.tableExistenciasAlmacenes.CORRSUMINISTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.DESCGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCGRUPONull()
            Me(Me.tableExistenciasAlmacenes.DESCGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCLARGONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.DESCLARGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCLARGONull()
            Me(Me.tableExistenciasAlmacenes.DESCLARGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCSUBGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.DESCSUBGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCSUBGRUPONull()
            Me(Me.tableExistenciasAlmacenes.DESCSUBGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCSUMINISTRONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.DESCSUMINISTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCSUMINISTRONull()
            Me(Me.tableExistenciasAlmacenes.DESCSUMINISTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIRECCIONNull()
            Me(Me.tableExistenciasAlmacenes.DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESFARMACIANull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.ESFARMACIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESFARMACIANull()
            Me(Me.tableExistenciasAlmacenes.ESFARMACIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTADISPONIBLENull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.ESTADISPONIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTADISPONIBLENull()
            Me(Me.tableExistenciasAlmacenes.ESTADISPONIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDALMACENNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDALMACENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDALMACENNull()
            Me(Me.tableExistenciasAlmacenes.IDALMACENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDALMACENORIGENNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDALMACENORIGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDALMACENORIGENNull()
            Me(Me.tableExistenciasAlmacenes.IDALMACENORIGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDGRUPONull()
            Me(Me.tableExistenciasAlmacenes.IDGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDPRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDPRODUCTONull()
            Me(Me.tableExistenciasAlmacenes.IDPRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDSUBGRUPONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDSUBGRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDSUBGRUPONull()
            Me(Me.tableExistenciasAlmacenes.IDSUBGRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDSUMINISTRONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDSUMINISTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDSUMINISTRONull()
            Me(Me.tableExistenciasAlmacenes.IDSUMINISTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDUNIDADMEDIDANull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.IDUNIDADMEDIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDUNIDADMEDIDANull()
            Me(Me.tableExistenciasAlmacenes.IDUNIDADMEDIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTENull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.LOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTENull()
            Me(Me.tableExistenciasAlmacenes.LOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONTONull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.MONTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONTONull()
            Me(Me.tableExistenciasAlmacenes.MONTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBREALMACENNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.NOMBREALMACENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBREALMACENNull()
            Me(Me.tableExistenciasAlmacenes.NOMBREALMACENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBREALMACENORIGENNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.NOMBREALMACENORIGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBREALMACENORIGENNull()
            Me(Me.tableExistenciasAlmacenes.NOMBREALMACENORIGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRECORTORESPONSABLENull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.NOMBRECORTORESPONSABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRECORTORESPONSABLENull()
            Me(Me.tableExistenciasAlmacenes.NOMBRECORTORESPONSABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBREFUENTENull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.NOMBREFUENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBREFUENTENull()
            Me(Me.tableExistenciasAlmacenes.NOMBREFUENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRERESPONSABLENull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.NOMBRERESPONSABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRERESPONSABLENull()
            Me(Me.tableExistenciasAlmacenes.NOMBRERESPONSABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADMEDIDANull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.UNIDADMEDIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADMEDIDANull()
            Me(Me.tableExistenciasAlmacenes.UNIDADMEDIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSECNull() As Boolean
            Return Me.IsNull(Me.tableExistenciasAlmacenes.SECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSECNull()
            Me(Me.tableExistenciasAlmacenes.SECColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExistenciasAlmacenesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExistenciasAlmacenesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExistenciasAlmacenesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExistenciasAlmacenesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
