'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3623
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRptGarantia"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRptGarantia
    Inherits Global.System.Data.DataSet
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private tableDataTable2 As DataTable2DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            If (Not (ds.Tables("DataTable2")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable2DataTable(ds.Tables("DataTable2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable2() As DataTable2DataTable
        Get
            Return Me.tableDataTable2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRptGarantia = CType(MyBase.Clone,dsRptGarantia)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            If (Not (ds.Tables("DataTable2")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable2DataTable(ds.Tables("DataTable2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
        Me.tableDataTable2 = CType(MyBase.Tables("DataTable2"),DataTable2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable2) Is Nothing) Then
                Me.tableDataTable2.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRptGarantia"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRptGarantia.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
        Me.tableDataTable2 = New DataTable2DataTable
        MyBase.Tables.Add(Me.tableDataTable2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRptGarantia = New dsRptGarantia
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    Public Delegate Sub DataTable2RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable2RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnnumproceso As Global.System.Data.DataColumn
        
        Private columnnumcontrato As Global.System.Data.DataColumn
        
        Private columntipogarantia As Global.System.Data.DataColumn
        
        Private columnnumgarantia As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columnestadoentrega As Global.System.Data.DataColumn
        
        Private columnNIT As Global.System.Data.DataColumn
        
        Private columnmodalidad As Global.System.Data.DataColumn
        
        Private columnfechavto As Global.System.Data.DataColumn
        
        Private columnfechadevgtia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numprocesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumproceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numcontratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumcontrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipogarantiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipogarantia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numgarantiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumgarantia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoentregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestadoentrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property modalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechavtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechavto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechadevgtiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechadevgtia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row(ByVal Proveedor As String, ByVal numproceso As String, ByVal numcontrato As String, ByVal tipogarantia As String, ByVal numgarantia As String, ByVal monto As Decimal, ByVal estado As String, ByVal estadoentrega As String, ByVal NIT As String, ByVal modalidad As String, ByVal fechavto As Date, ByVal fechadevgtia As Date) As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {Proveedor, numproceso, numcontrato, tipogarantia, numgarantia, monto, estado, estadoentrega, NIT, modalidad, fechavto, fechadevgtia}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnnumproceso = MyBase.Columns("numproceso")
            Me.columnnumcontrato = MyBase.Columns("numcontrato")
            Me.columntipogarantia = MyBase.Columns("tipogarantia")
            Me.columnnumgarantia = MyBase.Columns("numgarantia")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columnestado = MyBase.Columns("estado")
            Me.columnestadoentrega = MyBase.Columns("estadoentrega")
            Me.columnNIT = MyBase.Columns("NIT")
            Me.columnmodalidad = MyBase.Columns("modalidad")
            Me.columnfechavto = MyBase.Columns("fechavto")
            Me.columnfechadevgtia = MyBase.Columns("fechadevgtia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnnumproceso = New Global.System.Data.DataColumn("numproceso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumproceso)
            Me.columnnumcontrato = New Global.System.Data.DataColumn("numcontrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumcontrato)
            Me.columntipogarantia = New Global.System.Data.DataColumn("tipogarantia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipogarantia)
            Me.columnnumgarantia = New Global.System.Data.DataColumn("numgarantia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumgarantia)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columnestadoentrega = New Global.System.Data.DataColumn("estadoentrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoentrega)
            Me.columnNIT = New Global.System.Data.DataColumn("NIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIT)
            Me.columnmodalidad = New Global.System.Data.DataColumn("modalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodalidad)
            Me.columnfechavto = New Global.System.Data.DataColumn("fechavto", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechavto)
            Me.columnfechadevgtia = New Global.System.Data.DataColumn("fechadevgtia", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechadevgtia)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptGarantia = New dsRptGarantia
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNIT As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnNOMBREABR As Global.System.Data.DataColumn
        
        Private columnTIPODOCUMENTO As Global.System.Data.DataColumn
        
        Private columnMODALIDADCOMPRA As Global.System.Data.DataColumn
        
        Private columnNUMPROCESO As Global.System.Data.DataColumn
        
        Private columnENTIDAD As Global.System.Data.DataColumn
        
        Private columnNUMGARANTIA As Global.System.Data.DataColumn
        
        Private columnMONTO As Global.System.Data.DataColumn
        
        Private columnFECHAEMISION As Global.System.Data.DataColumn
        
        Private columnTOTALDIAS As Global.System.Data.DataColumn
        
        Private columnFECHAVTO As Global.System.Data.DataColumn
        
        Private columnFECHASOLDEVGTIA As Global.System.Data.DataColumn
        
        Private columnFECHARESFIRME As Global.System.Data.DataColumn
        
        Private columnFECHADEVGTIA As Global.System.Data.DataColumn
        
        Private columnFECHAEFEGTIA As Global.System.Data.DataColumn
        
        Private columnCAUSAL As Global.System.Data.DataColumn
        
        Private columnOBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnFECHAAPRPLANUTIANT As Global.System.Data.DataColumn
        
        Private columnFECHAUTIPLANAVFI As Global.System.Data.DataColumn
        
        Private columnFECHAACEPGTIACUMCON As Global.System.Data.DataColumn
        
        Private columnFECHAACEPGTIA As Global.System.Data.DataColumn
        
        Private columnFECHAENVIOUFI As Global.System.Data.DataColumn
        
        Private columnFECHARECUFI As Global.System.Data.DataColumn
        
        Private columnFECHAEJEANT As Global.System.Data.DataColumn
        
        Private columnFECHAACGTIABVEOB As Global.System.Data.DataColumn
        
        Private columnFECHAACEPFIABUECAL As Global.System.Data.DataColumn
        
        Private columnFECHAACTAREL As Global.System.Data.DataColumn
        
        Private columnFECHALIQUIDACION As Global.System.Data.DataColumn
        
        Private columnFECHARECBOS As Global.System.Data.DataColumn
        
        Private columnFECHAPRESENTACION As Global.System.Data.DataColumn
        
        Private columnFECHAOBSERVACION As Global.System.Data.DataColumn
        
        Private columnNUMCONTRATO As Global.System.Data.DataColumn
        
        Private columnFECHADISTRIBUCION As Global.System.Data.DataColumn
        
        Private columnVALORCUANTIA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREABRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREABR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPODOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPODOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODALIDADCOMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODALIDADCOMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPROCESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPROCESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMGARANTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMGARANTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAEMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAEMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAVTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAVTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHASOLDEVGTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHASOLDEVGTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHARESFIRMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHARESFIRME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHADEVGTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHADEVGTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAEFEGTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAEFEGTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAUSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAUSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAAPRPLANUTIANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAAPRPLANUTIANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAUTIPLANAVFIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAUTIPLANAVFI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAACEPGTIACUMCONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAACEPGTIACUMCON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAACEPGTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAACEPGTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAENVIOUFIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAENVIOUFI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHARECUFIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHARECUFI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAEJEANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAEJEANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAACGTIABVEOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAACGTIABVEOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAACEPFIABUECALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAACEPFIABUECAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAACTARELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAACTAREL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHALIQUIDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHALIQUIDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHARECBOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHARECBOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAPRESENTACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAPRESENTACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAOBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAOBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCONTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCONTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHADISTRIBUCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHADISTRIBUCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALORCUANTIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALORCUANTIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable2Row
            Get
                Return CType(Me.Rows(index),DataTable2Row)
            End Get
        End Property
        
        Public Event DataTable2RowChanging As DataTable2RowChangeEventHandler
        
        Public Event DataTable2RowChanged As DataTable2RowChangeEventHandler
        
        Public Event DataTable2RowDeleting As DataTable2RowChangeEventHandler
        
        Public Event DataTable2RowDeleted As DataTable2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable2Row(ByVal row As DataTable2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable2Row( _
                    ByVal NIT As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal NOMBREABR As String,  _
                    ByVal TIPODOCUMENTO As String,  _
                    ByVal MODALIDADCOMPRA As String,  _
                    ByVal NUMPROCESO As String,  _
                    ByVal ENTIDAD As String,  _
                    ByVal NUMGARANTIA As String,  _
                    ByVal MONTO As Decimal,  _
                    ByVal FECHAEMISION As Date,  _
                    ByVal TOTALDIAS As Integer,  _
                    ByVal FECHAVTO As Date,  _
                    ByVal FECHASOLDEVGTIA As Date,  _
                    ByVal FECHARESFIRME As Date,  _
                    ByVal FECHADEVGTIA As Date,  _
                    ByVal FECHAEFEGTIA As Date,  _
                    ByVal CAUSAL As String,  _
                    ByVal OBSERVACIONES As String,  _
                    ByVal FECHAAPRPLANUTIANT As Date,  _
                    ByVal FECHAUTIPLANAVFI As Date,  _
                    ByVal FECHAACEPGTIACUMCON As Date,  _
                    ByVal FECHAACEPGTIA As Date,  _
                    ByVal FECHAENVIOUFI As Date,  _
                    ByVal FECHARECUFI As Date,  _
                    ByVal FECHAEJEANT As Date,  _
                    ByVal FECHAACGTIABVEOB As Date,  _
                    ByVal FECHAACEPFIABUECAL As Date,  _
                    ByVal FECHAACTAREL As Date,  _
                    ByVal FECHALIQUIDACION As Date,  _
                    ByVal FECHARECBOS As Date,  _
                    ByVal FECHAPRESENTACION As Date,  _
                    ByVal FECHAOBSERVACION As Date,  _
                    ByVal NUMCONTRATO As String,  _
                    ByVal FECHADISTRIBUCION As Date,  _
                    ByVal VALORCUANTIA As Decimal) As DataTable2Row
            Dim rowDataTable2Row As DataTable2Row = CType(Me.NewRow,DataTable2Row)
            Dim columnValuesArray() As Object = New Object() {NIT, NOMBRE, NOMBREABR, TIPODOCUMENTO, MODALIDADCOMPRA, NUMPROCESO, ENTIDAD, NUMGARANTIA, MONTO, FECHAEMISION, TOTALDIAS, FECHAVTO, FECHASOLDEVGTIA, FECHARESFIRME, FECHADEVGTIA, FECHAEFEGTIA, CAUSAL, OBSERVACIONES, FECHAAPRPLANUTIANT, FECHAUTIPLANAVFI, FECHAACEPGTIACUMCON, FECHAACEPGTIA, FECHAENVIOUFI, FECHARECUFI, FECHAEJEANT, FECHAACGTIABVEOB, FECHAACEPFIABUECAL, FECHAACTAREL, FECHALIQUIDACION, FECHARECBOS, FECHAPRESENTACION, FECHAOBSERVACION, NUMCONTRATO, FECHADISTRIBUCION, VALORCUANTIA}
            rowDataTable2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable2Row)
            Return rowDataTable2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable2DataTable = CType(MyBase.Clone,DataTable2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNIT = MyBase.Columns("NIT")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnNOMBREABR = MyBase.Columns("NOMBREABR")
            Me.columnTIPODOCUMENTO = MyBase.Columns("TIPODOCUMENTO")
            Me.columnMODALIDADCOMPRA = MyBase.Columns("MODALIDADCOMPRA")
            Me.columnNUMPROCESO = MyBase.Columns("NUMPROCESO")
            Me.columnENTIDAD = MyBase.Columns("ENTIDAD")
            Me.columnNUMGARANTIA = MyBase.Columns("NUMGARANTIA")
            Me.columnMONTO = MyBase.Columns("MONTO")
            Me.columnFECHAEMISION = MyBase.Columns("FECHAEMISION")
            Me.columnTOTALDIAS = MyBase.Columns("TOTALDIAS")
            Me.columnFECHAVTO = MyBase.Columns("FECHAVTO")
            Me.columnFECHASOLDEVGTIA = MyBase.Columns("FECHASOLDEVGTIA")
            Me.columnFECHARESFIRME = MyBase.Columns("FECHARESFIRME")
            Me.columnFECHADEVGTIA = MyBase.Columns("FECHADEVGTIA")
            Me.columnFECHAEFEGTIA = MyBase.Columns("FECHAEFEGTIA")
            Me.columnCAUSAL = MyBase.Columns("CAUSAL")
            Me.columnOBSERVACIONES = MyBase.Columns("OBSERVACIONES")
            Me.columnFECHAAPRPLANUTIANT = MyBase.Columns("FECHAAPRPLANUTIANT")
            Me.columnFECHAUTIPLANAVFI = MyBase.Columns("FECHAUTIPLANAVFI")
            Me.columnFECHAACEPGTIACUMCON = MyBase.Columns("FECHAACEPGTIACUMCON")
            Me.columnFECHAACEPGTIA = MyBase.Columns("FECHAACEPGTIA")
            Me.columnFECHAENVIOUFI = MyBase.Columns("FECHAENVIOUFI")
            Me.columnFECHARECUFI = MyBase.Columns("FECHARECUFI")
            Me.columnFECHAEJEANT = MyBase.Columns("FECHAEJEANT")
            Me.columnFECHAACGTIABVEOB = MyBase.Columns("FECHAACGTIABVEOB")
            Me.columnFECHAACEPFIABUECAL = MyBase.Columns("FECHAACEPFIABUECAL")
            Me.columnFECHAACTAREL = MyBase.Columns("FECHAACTAREL")
            Me.columnFECHALIQUIDACION = MyBase.Columns("FECHALIQUIDACION")
            Me.columnFECHARECBOS = MyBase.Columns("FECHARECBOS")
            Me.columnFECHAPRESENTACION = MyBase.Columns("FECHAPRESENTACION")
            Me.columnFECHAOBSERVACION = MyBase.Columns("FECHAOBSERVACION")
            Me.columnNUMCONTRATO = MyBase.Columns("NUMCONTRATO")
            Me.columnFECHADISTRIBUCION = MyBase.Columns("FECHADISTRIBUCION")
            Me.columnVALORCUANTIA = MyBase.Columns("VALORCUANTIA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNIT = New Global.System.Data.DataColumn("NIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIT)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnNOMBREABR = New Global.System.Data.DataColumn("NOMBREABR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREABR)
            Me.columnTIPODOCUMENTO = New Global.System.Data.DataColumn("TIPODOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPODOCUMENTO)
            Me.columnMODALIDADCOMPRA = New Global.System.Data.DataColumn("MODALIDADCOMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODALIDADCOMPRA)
            Me.columnNUMPROCESO = New Global.System.Data.DataColumn("NUMPROCESO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPROCESO)
            Me.columnENTIDAD = New Global.System.Data.DataColumn("ENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTIDAD)
            Me.columnNUMGARANTIA = New Global.System.Data.DataColumn("NUMGARANTIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMGARANTIA)
            Me.columnMONTO = New Global.System.Data.DataColumn("MONTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO)
            Me.columnFECHAEMISION = New Global.System.Data.DataColumn("FECHAEMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAEMISION)
            Me.columnTOTALDIAS = New Global.System.Data.DataColumn("TOTALDIAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDIAS)
            Me.columnFECHAVTO = New Global.System.Data.DataColumn("FECHAVTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAVTO)
            Me.columnFECHASOLDEVGTIA = New Global.System.Data.DataColumn("FECHASOLDEVGTIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHASOLDEVGTIA)
            Me.columnFECHARESFIRME = New Global.System.Data.DataColumn("FECHARESFIRME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHARESFIRME)
            Me.columnFECHADEVGTIA = New Global.System.Data.DataColumn("FECHADEVGTIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHADEVGTIA)
            Me.columnFECHAEFEGTIA = New Global.System.Data.DataColumn("FECHAEFEGTIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAEFEGTIA)
            Me.columnCAUSAL = New Global.System.Data.DataColumn("CAUSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAUSAL)
            Me.columnOBSERVACIONES = New Global.System.Data.DataColumn("OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVACIONES)
            Me.columnFECHAAPRPLANUTIANT = New Global.System.Data.DataColumn("FECHAAPRPLANUTIANT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAAPRPLANUTIANT)
            Me.columnFECHAUTIPLANAVFI = New Global.System.Data.DataColumn("FECHAUTIPLANAVFI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAUTIPLANAVFI)
            Me.columnFECHAACEPGTIACUMCON = New Global.System.Data.DataColumn("FECHAACEPGTIACUMCON", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAACEPGTIACUMCON)
            Me.columnFECHAACEPGTIA = New Global.System.Data.DataColumn("FECHAACEPGTIA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAACEPGTIA)
            Me.columnFECHAENVIOUFI = New Global.System.Data.DataColumn("FECHAENVIOUFI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAENVIOUFI)
            Me.columnFECHARECUFI = New Global.System.Data.DataColumn("FECHARECUFI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHARECUFI)
            Me.columnFECHAEJEANT = New Global.System.Data.DataColumn("FECHAEJEANT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAEJEANT)
            Me.columnFECHAACGTIABVEOB = New Global.System.Data.DataColumn("FECHAACGTIABVEOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAACGTIABVEOB)
            Me.columnFECHAACEPFIABUECAL = New Global.System.Data.DataColumn("FECHAACEPFIABUECAL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAACEPFIABUECAL)
            Me.columnFECHAACTAREL = New Global.System.Data.DataColumn("FECHAACTAREL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAACTAREL)
            Me.columnFECHALIQUIDACION = New Global.System.Data.DataColumn("FECHALIQUIDACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHALIQUIDACION)
            Me.columnFECHARECBOS = New Global.System.Data.DataColumn("FECHARECBOS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHARECBOS)
            Me.columnFECHAPRESENTACION = New Global.System.Data.DataColumn("FECHAPRESENTACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAPRESENTACION)
            Me.columnFECHAOBSERVACION = New Global.System.Data.DataColumn("FECHAOBSERVACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAOBSERVACION)
            Me.columnNUMCONTRATO = New Global.System.Data.DataColumn("NUMCONTRATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCONTRATO)
            Me.columnFECHADISTRIBUCION = New Global.System.Data.DataColumn("FECHADISTRIBUCION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHADISTRIBUCION)
            Me.columnVALORCUANTIA = New Global.System.Data.DataColumn("VALORCUANTIA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALORCUANTIA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable2Row() As DataTable2Row
            Return CType(Me.NewRow,DataTable2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable2RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable2RowChanged(Me, New DataTable2RowChangeEvent(CType(e.Row,DataTable2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable2RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable2RowChanging(Me, New DataTable2RowChangeEvent(CType(e.Row,DataTable2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable2RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable2RowDeleted(Me, New DataTable2RowChangeEvent(CType(e.Row,DataTable2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable2RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable2RowDeleting(Me, New DataTable2RowChangeEvent(CType(e.Row,DataTable2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable2Row(ByVal row As DataTable2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptGarantia = New dsRptGarantia
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numproceso() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.numprocesoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'numproceso' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.numprocesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numcontrato() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.numcontratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'numcontrato' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.numcontratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipogarantia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.tipogarantiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tipogarantia' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.tipogarantiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numgarantia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.numgarantiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'numgarantia' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.numgarantiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'monto' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.estadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'estado' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoentrega() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.estadoentregaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'estadoentrega' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.estadoentregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.NITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIT' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.NITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property modalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.modalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'modalidad' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.modalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechavto() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.fechavtoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fechavto' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.fechavtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechadevgtia() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.fechadevgtiaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fechadevgtia' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.fechadevgtiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tableDataTable1.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumprocesoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.numprocesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumprocesoNull()
            Me(Me.tableDataTable1.numprocesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumcontratoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.numcontratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumcontratoNull()
            Me(Me.tableDataTable1.numcontratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipogarantiaNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.tipogarantiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipogarantiaNull()
            Me(Me.tableDataTable1.tipogarantiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumgarantiaNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.numgarantiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumgarantiaNull()
            Me(Me.tableDataTable1.numgarantiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tableDataTable1.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableDataTable1.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoentregaNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.estadoentregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoentregaNull()
            Me(Me.tableDataTable1.estadoentregaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNITNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.NITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNITNull()
            Me(Me.tableDataTable1.NITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmodalidadNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.modalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmodalidadNull()
            Me(Me.tableDataTable1.modalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechavtoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.fechavtoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechavtoNull()
            Me(Me.tableDataTable1.fechavtoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechadevgtiaNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.fechadevgtiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechadevgtiaNull()
            Me(Me.tableDataTable1.fechadevgtiaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable2Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable2 As DataTable2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable2 = CType(Me.Table,DataTable2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIT' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMBRE' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBREABR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NOMBREABRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMBREABR' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NOMBREABRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPODOCUMENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.TIPODOCUMENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPODOCUMENTO' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.TIPODOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODALIDADCOMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.MODALIDADCOMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODALIDADCOMPRA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.MODALIDADCOMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPROCESO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NUMPROCESOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMPROCESO' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NUMPROCESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.ENTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENTIDAD' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.ENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMGARANTIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NUMGARANTIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMGARANTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NUMGARANTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.MONTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MONTO' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.MONTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAEMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAEMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAEMISION' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAEMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDIAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.TOTALDIASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDIAS' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.TOTALDIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAVTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAVTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAVTO' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAVTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHASOLDEVGTIA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHASOLDEVGTIAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHASOLDEVGTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHASOLDEVGTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHARESFIRME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHARESFIRMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHARESFIRME' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHARESFIRMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHADEVGTIA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHADEVGTIAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHADEVGTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHADEVGTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAEFEGTIA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAEFEGTIAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAEFEGTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAEFEGTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAUSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.CAUSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CAUSAL' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.CAUSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OBSERVACIONES' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAAPRPLANUTIANT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAAPRPLANUTIANTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAAPRPLANUTIANT' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAAPRPLANUTIANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAUTIPLANAVFI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAUTIPLANAVFIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAUTIPLANAVFI' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAUTIPLANAVFIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAACEPGTIACUMCON() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAACEPGTIACUMCONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAACEPGTIACUMCON' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAACEPGTIACUMCONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAACEPGTIA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAACEPGTIAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAACEPGTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAACEPGTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAENVIOUFI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAENVIOUFIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAENVIOUFI' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAENVIOUFIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHARECUFI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHARECUFIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHARECUFI' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHARECUFIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAEJEANT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAEJEANTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAEJEANT' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAEJEANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAACGTIABVEOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAACGTIABVEOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAACGTIABVEOB' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAACGTIABVEOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAACEPFIABUECAL() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAACEPFIABUECALColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAACEPFIABUECAL' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAACEPFIABUECALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAACTAREL() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAACTARELColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAACTAREL' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAACTARELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHALIQUIDACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHALIQUIDACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHALIQUIDACION' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHALIQUIDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHARECBOS() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHARECBOSColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHARECBOS' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHARECBOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAPRESENTACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAPRESENTACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAPRESENTACION' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAPRESENTACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAOBSERVACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHAOBSERVACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHAOBSERVACION' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHAOBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCONTRATO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.NUMCONTRATOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMCONTRATO' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.NUMCONTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHADISTRIBUCION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.FECHADISTRIBUCIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHADISTRIBUCION' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.FECHADISTRIBUCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALORCUANTIA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable2.VALORCUANTIAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALORCUANTIA' in table 'DataTable2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable2.VALORCUANTIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNITNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNITNull()
            Me(Me.tableDataTable2.NITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableDataTable2.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBREABRNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NOMBREABRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBREABRNull()
            Me(Me.tableDataTable2.NOMBREABRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPODOCUMENTONull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.TIPODOCUMENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPODOCUMENTONull()
            Me(Me.tableDataTable2.TIPODOCUMENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODALIDADCOMPRANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.MODALIDADCOMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODALIDADCOMPRANull()
            Me(Me.tableDataTable2.MODALIDADCOMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMPROCESONull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NUMPROCESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMPROCESONull()
            Me(Me.tableDataTable2.NUMPROCESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENTIDADNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.ENTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENTIDADNull()
            Me(Me.tableDataTable2.ENTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMGARANTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NUMGARANTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMGARANTIANull()
            Me(Me.tableDataTable2.NUMGARANTIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONTONull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.MONTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONTONull()
            Me(Me.tableDataTable2.MONTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAEMISIONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAEMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAEMISIONNull()
            Me(Me.tableDataTable2.FECHAEMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDIASNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.TOTALDIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDIASNull()
            Me(Me.tableDataTable2.TOTALDIASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAVTONull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAVTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAVTONull()
            Me(Me.tableDataTable2.FECHAVTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHASOLDEVGTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHASOLDEVGTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHASOLDEVGTIANull()
            Me(Me.tableDataTable2.FECHASOLDEVGTIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHARESFIRMENull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHARESFIRMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHARESFIRMENull()
            Me(Me.tableDataTable2.FECHARESFIRMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHADEVGTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHADEVGTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHADEVGTIANull()
            Me(Me.tableDataTable2.FECHADEVGTIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAEFEGTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAEFEGTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAEFEGTIANull()
            Me(Me.tableDataTable2.FECHAEFEGTIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAUSALNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.CAUSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAUSALNull()
            Me(Me.tableDataTable2.CAUSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOBSERVACIONESNull()
            Me(Me.tableDataTable2.OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAAPRPLANUTIANTNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAAPRPLANUTIANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAAPRPLANUTIANTNull()
            Me(Me.tableDataTable2.FECHAAPRPLANUTIANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAUTIPLANAVFINull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAUTIPLANAVFIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAUTIPLANAVFINull()
            Me(Me.tableDataTable2.FECHAUTIPLANAVFIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAACEPGTIACUMCONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAACEPGTIACUMCONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAACEPGTIACUMCONNull()
            Me(Me.tableDataTable2.FECHAACEPGTIACUMCONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAACEPGTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAACEPGTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAACEPGTIANull()
            Me(Me.tableDataTable2.FECHAACEPGTIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAENVIOUFINull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAENVIOUFIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAENVIOUFINull()
            Me(Me.tableDataTable2.FECHAENVIOUFIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHARECUFINull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHARECUFIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHARECUFINull()
            Me(Me.tableDataTable2.FECHARECUFIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAEJEANTNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAEJEANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAEJEANTNull()
            Me(Me.tableDataTable2.FECHAEJEANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAACGTIABVEOBNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAACGTIABVEOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAACGTIABVEOBNull()
            Me(Me.tableDataTable2.FECHAACGTIABVEOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAACEPFIABUECALNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAACEPFIABUECALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAACEPFIABUECALNull()
            Me(Me.tableDataTable2.FECHAACEPFIABUECALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAACTARELNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAACTARELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAACTARELNull()
            Me(Me.tableDataTable2.FECHAACTARELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHALIQUIDACIONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHALIQUIDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHALIQUIDACIONNull()
            Me(Me.tableDataTable2.FECHALIQUIDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHARECBOSNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHARECBOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHARECBOSNull()
            Me(Me.tableDataTable2.FECHARECBOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAPRESENTACIONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAPRESENTACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAPRESENTACIONNull()
            Me(Me.tableDataTable2.FECHAPRESENTACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAOBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHAOBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAOBSERVACIONNull()
            Me(Me.tableDataTable2.FECHAOBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMCONTRATONull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.NUMCONTRATOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMCONTRATONull()
            Me(Me.tableDataTable2.NUMCONTRATOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHADISTRIBUCIONNull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.FECHADISTRIBUCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHADISTRIBUCIONNull()
            Me(Me.tableDataTable2.FECHADISTRIBUCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALORCUANTIANull() As Boolean
            Return Me.IsNull(Me.tableDataTable2.VALORCUANTIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALORCUANTIANull()
            Me(Me.tableDataTable2.VALORCUANTIAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
